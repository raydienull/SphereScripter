{
  "begin": {
    "prefix": "begin",
    "body": [
      "BEGIN",
      "\t$0",
      "END"
    ],
    "description": "Groups a set of lines, for use with DORAND and DOSWITCH statements."
  },
  "dorand": {
    "prefix": "dorand",
    "body": [
      "DORAND ${1:value}",
      "\t$0",
      "ENDDO"
    ],
    "description": "Executes a random line of code within the block."
  },
  "doswitch": {
    "prefix": "doswitch",
    "body": [
      "DOSWITCH ${1:value}",
      "\t$0",
      "ENDDO"
    ],
    "description": "Executes the specified line of code within the block"
  },
  "for": {
    "prefix": "for",
    "body": [
      "FOR ${2:name} ${1:range}",
      "\t$0",
      "ENDFOR"
    ],
    "description": "FOR is a powerful way to create a recursive function, and allows for a simpler level of control over your recursions. If no variable is declared, the count can be accessed using <LOCAL._FOR>. Changing LOCAL._FOR or whatever you have declared as the count will not change the loop's behavior. But note that if you stack FOR loops without giving them different loop variables, the innermost loop will overwrite the loop variables of its successors, which usually leads to complete chaos of the whole loop"
  },
  "forcharlayer": {
    "prefix": "forcharlayer",
    "body": [
      "FORCHARLAYER ${1:layer}",
      "\t$0",
      "ENDFOR"
    ],
    "description": "FORCHARLAYER is another type of FOR loop. Basically it allows you to loop through every item that is stored in the specified layer of a character. This can be useful for when you want to manipulate all spell runes or memory items on a character as an alternative to using FINDLAYER.x in a loop. One thing to note here is that while inside the loop, the default object will be temporarily changed to the item in the loop."
  },
  "forcharmemorytype": {
    "prefix": "forcharmemorytype",
    "body": [
      "FORCHARMEMORYTYPE ${1:memory_flags}",
      "\t$0",
      "ENDFOR"
    ],
    "description": "FORCHARMEMORYTYPE is a very useful type of FOR loop. You might want to use it for experience systems, and some player and NPC killing systems. It loops through every memory item on a character that has a specified flag."
  },
  "forchars": {
    "prefix": "forchars",
    "body": [
      "FORCHARS ${1:distance}",
      "\t$0",
      "ENDFOR"
    ],
    "description": "FORCHARS is a FOR loop that you can use to check all mobiles (online player and NPC) within a certain radius of an object."
  },
  "forclients": {
    "prefix": "forclients",
    "body": [
      "FORCLIENTS ${1:distance}",
      "\t$0",
      "ENDFOR"
    ],
    "description": "FORCLIENTS is a FOR loop, used to affect clients within a certain radius. If you don't set the radius, radius 18 is used as default. FORCLIENTS only acts on player characters that are connected."
  },
  "forplayers": {
    "prefix": "forplayers",
    "body": [
      "FORPLAYERS ${1:distance}",
      "\t$0",
      "ENDFOR"
    ],
    "description": "FORPLAYERS is a FOR loop, used to affect players within a certain radius. If you don't set the radius, radius 18 is used as default. FORPLAYERS acts on every single player character, even if they are disconnected."
  },
  "forcont": {
    "prefix": "forcont",
    "body": [
      "FORCONT ${1:cont_uid} ${2:max_subcontainers}",
      "\t$0",
      "ENDFOR"
    ],
    "description": "FORCONT is a type of FOR loop. It loops through each element of a container. The default object inside the loop will be the element that the loop is being performed on."
  },
  "forcontid": {
    "prefix": "forcontid",
    "body": [
      "FORCONTID ${1:baseID}",
      "\t$0",
      "ENDFOR"
    ],
    "description": "FORCONTID is a FOR loop that works similar to FORCONT, except it will only loop through elements that have a specific BASEID."
  },
  "forconttype": {
    "prefix": "forconttype",
    "body": [
      "FORCONTTYPE ${1:itemtype}",
      "\t$0",
      "ENDFOR"
    ],
    "description": "This is another FOR loop that is almost identical to FORCONID. The only difference is that instead of looping through elements with a specific BASEID, it will loop through elements with a specific TYPE."
  },
  "forinstances": {
    "prefix": "forinstances",
    "body": [
      "FORINSTANCES ${1:baseID}",
      "\t$0",
      "ENDFOR"
    ],
    "description": "FORINSTANCES is a special loop that will loop through all instances of a given character or item BASEID that exist on the server. This offers the following advantages over using FORITEMS/FORCHARS. Sphere will only execute your script for objects with the BASEID that you are interested in. Sphere knows how many instances of the object exist, so it can abort the loop at the appropriate time. Objects inside containers (such as character backpacks or player banks) will not be missed."
  },
  "foritems": {
    "prefix": "foritems",
    "body": [
      "FORITEMS ${1:distance}",
      "\t$0",
      "ENDFOR"
    ],
    "description": "FORITEMS works very similarly to FORCHARS, except it checks ITEMS within the established radius instead of characters. The default object is the element that can be affected."
  },
  "forobjs": {
    "prefix": "forobjs",
    "body": [
      "FOROBJS ${1:distance}",
      "\t$0",
      "ENDFOR"
    ],
    "description": "FOROBJS works the same way as FORITEMS and FORCHARS with the exception that this loop will find both CHARACTERS AND ITEMS within the specified radius."
  },
  "while": {
    "prefix": "while",
    "body": [
      "WHILE ${1:conditional}",
      "\t$0",
      "ENDWHILE"
    ],
    "description": "WHILE is a conditional loop, a block of code that will repeat while a given condition is true. Basically this can be thought of as an IF..ENDIF block that will run indefinitely until the IF statement returns false. While inside the loop, LOCAL._WHILE can be used to access the number of times that the script has looped so far. In some situations you may want to use this to impose a limit on the number of times your WHILE block can loop before it is forced to exit."
  },
  "try": {
    "prefix": "try",
    "body": [
      "TRY ${1:value}"
    ],
    "description": "TRY can be used to execute a line of script where the left-hand side (i.e. a property being set or a function being called) is based on the value of an expression."
  },
  "tryp": {
    "prefix": "tryp",
    "body": [
      "TRYP ${1:plevel} ${2:value}"
    ],
    "description": "It is the same as the TRY function, except that a PLEVEL parameter is also provided. If SRC's PLEVEL is less than this value, the line will not be executed. However, with TRYP the line will also be executed if there is no SRC (in a @Timer trigger, for example)."
  },
  "trysrc": {
    "prefix": "trysrc",
    "body": [
      "TRYSRC ${1:value}"
    ],
    "description": "The TRYSRC function can be used to override the SRC object for a given line. The syntax for this function is TRYSRC uid command, where uid is the UID of the character that you want to make SRC, and command is the command that you want to execute."
  },
  "trysrv": {
    "prefix": "trysrv",
    "body": [
      "TRYSRV ${1:value}"
    ],
    "description": "TRYSRV is similar to the TRYSRC command, except that instead of executing a command with a specific character as SRC, the command is executed with SRC set to the SERV object."
  },
  "if": {
    "prefix": "if",
    "body": [
      "IF ($1)",
      "    $2",
      "ENDIF"
    ],
    "description": "if block"
  },
  "if-else": {
    "prefix": "if-else",
    "body": [
      "IF ($1)",
      "    $2",
      "ELSE",
      "    $3",
      "ENDIF"
    ],
    "description": "if-else block"
  },
  "if-elseif-else": {
    "prefix": "if-elseif-else",
    "body": [
      "IF ($1)",
      "    $2",
      "ELSEIF ($3)",
      "    $4",
      "ELSE",
      "    $5",
      "ENDIF"
    ],
    "description": "if-elseif-else block"
  },
  "itemdef": {
    "prefix": "itemdef",
    "body": [
      "[ITEMDEF ${1:i_item_name}]",
      "DEFNAME=${1:i_item_name}",
      "ID=${2:item_id}",
      "TYPE=${3:t_normal}",
      "NAME=${4:Item Name}",
      "WEIGHT=${5:1.0}",
      "",
      "ON=@Create",
      "$0",
      "",
      "ON=@DClick",
      "RETURN 1"
    ],
    "description": "Create a new item definition"
  },
  "chardef": {
    "prefix": "chardef",
    "body": [
      "[CHARDEF ${1:c_char_name}]",
      "DEFNAME=${1:c_char_name}",
      "ID=${2:char_id}",
      "NAME=${3:Character Name}",
      "STR=${4:100}",
      "INT=${5:100}",
      "DEX=${6:100}",
      "",
      "ON=@Create",
      "$0",
      "",
      "ON=@NPCRestock",
      "RETURN 1"
    ],
    "description": "Create a new character definition"
  },
  "typedef": {
    "prefix": "typedef",
    "body": [
      "[TYPEDEF ${1:t_type_name}]",
      "DEFNAME=${1:t_type_name}",
      "",
      "ON=@Create",
      "$0",
      "",
      "ON=@Timer",
      "RETURN 1"
    ],
    "description": "Create a new type definition"
  },
  "events": {
    "prefix": "events",
    "body": [
      "[EVENTS ${1:e_event_name}]",
      "",
      "ON=@${2:Trigger}",
      "$0",
      "RETURN 1"
    ],
    "description": "Create a new events block"
  },
  "function": {
    "prefix": "function",
    "body": [
      "[FUNCTION ${1:f_function_name}]",
      "// ${2:Function description}",
      "LOCAL.${3:var}=<ARGS>",
      "$0",
      "RETURN 1"
    ],
    "description": "Create a new function"
  },
  "say": {
    "prefix": "say",
    "body": [
      "SAY ${1:message}"
    ],
    "description": "Make character say something"
  },
  "sysmessage": {
    "prefix": "sysmsg",
    "body": [
      "SYSMESSAGE ${1:message}"
    ],
    "description": "Send system message to player"
  },
  "newitem": {
    "prefix": "newitem",
    "body": [
      "NEWITEM ${1:item_id}",
      "NEW.CONT=<SRC.UID>",
      "$0"
    ],
    "description": "Create new item in source container"
  },
  "dialog": {
    "prefix": "dialog",
    "body": [
      "DIALOG ${1:d_dialog_name}"
    ],
    "description": "Open dialog for source"
  }
}
